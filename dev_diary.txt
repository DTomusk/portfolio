05/07/20:
    As I've been playing around with vue I've found that I rarely have an idea of
what I should be doing next and how to do what I want to do. Maybe it's a lack of
experience with web development or maybe it's a lack of inspiration in terms of what
I want my website to look like and how I want it to function (or, most likely, a
combination of both), whatever it is, I frequently feel completely stuck. So with
this repo I've set out with a clear idea as to what I want to achieve (an online
portfolio) and a clearly defined approach for how I want to work. For this project,
I want every step to be absolutely minimal, I want every development to be made in
service of a minimal product and as the project progresses, those minimal
requirements can slowly grow. With my more sandbox-y web dev repo I feel like my
ideas jump around a lot and I can't focus on one thing for long enough to get it
done, and often whatever I want to do doesn't feel significant enough to warrant
my attention. If I have tons of things I want to do and no clue of how to do any
of them, it's clear that I'm gonna end up frustrated pretty frequently.

    So then, thinking of this project, what is the first minimal step that I can
work on? A portfolio needs to present the creator's body of work, so my project
should start with a minimal page that contains details of my projects. But of course
even that is a fairly involved task that requires work on both the front and back
end. I can imagine how the projects would be stored and then accessed on a web page,
but first I need to make a decision on what's the most important thing to tackle.
The goal is functionality, regardless of how good it looks. So first and foremost,
I think the projects need to exist somewhere so they can be accessed by a server
when the user loads the page. I think this could be done in a couple of ways, I've
never used SQL before but I imagine that that could be a path to go down, given I'd
need to store projects as entries with several properties in a database. Another
option would be to do what I've done before and simply store the projects as a json
object, I don't see how that approach would be lacking as there isn't an enormous
amount of information or entries that I'd need to take care of. Further, if projects
are the only entries that I'll have, then this database won't be all that relational,
it's not as though there'll be lots of different entry types that each connect to
each other (although I might be shooting myself in the foot there by predicting that).
However, I do feel interested in SQL and I don't think it would hurt to familiarise
myself with it, even if it does end up being a bit superfluous for this project. So
I'm gonna start by learning a bit of rudimentary SQL and then making a basic database
that contains my projects in some form.

;*************************************************************************************

Database notes:
    A relational database is a database that organizes information into tables
    A table is a collection of data where rows are entries (records) and columns are
attributes
    Each datum is of a certain type, whether that's Int, char, varchar etc.
    SQL is a declarative language which means it's more concerned with doing things
rather than how the things are done

;*************************************************************************************

06/07/20:

These are the commands I used to create my database:

SHOW databases;
CREATE database Portfolio;
use Portfolio;
CREATE table Projects(
id int,
Name varchar(45),
Description varchar(200),
ImgPath varchar(30)
);

I can now use my node server to query the project table in portfolio.

    The question is, what do I do with the record once I've queried it? Where does it
go, how should I display it?
    An idea I just had was to automate the process of creating project entries using
a webscraper on my github repos page, but I think the problem is small enough that it
can be done by hand, and also probably should be done by hand.
    Another major question is, what's a project entry going to look like in the end?
Will there be a page of projects where clicking on one either brings up a pop up or
takes you to a project page? I'd say those details aren't so important right now,
what's important is having a database that stores project records in some form and
a webpage that lists all the projects by querying them from the database. So the next
thing to do is to add an entry to the database, use our server to get it, then print
it in console.

    I wanted to use a web framework like vue for this project, but I realised that I
don't have enough experience with web development to dive right into that sort of
approach. So instead, I'm going to start off with the bare bones, just html and
gradually try to gain a better understanding of what's going on. My first task is to
make an html page (index.html) that, on load, sends a request to the server for the
db records and the server responds with the records which can then be displayed by
the page (I think I've misunderstood some things here, the server serves the page
the page doesn't really do anything, the requests and functions are handled by the
server).

    It's not uncommon that I sit down and think I have no clue what I'm doing. I don't
know if the way I'm doing things is the way that things are generally done, I'm just
trying to work it all out for myself. And I guess that's also what's fun about it,
as much as it can be frustrating.

    When the server start up it should connect to the database once and only once,
then the connection exists and we can use it however we want. Right now I've made it
so that when a request is made to the page it automatically makes a request to the
database. Now we're getting the records when we make the request, so all we need to
do is display those records on the page.

    The problem I'm facing at the moment is how to modify the html file itself when
the records are loaded so that when the page loads it has however many entries as
projects as were received. The conclusion I've reached is that I want to add li
entries to the ul in index.html, and to do this with the node server would require
jsdom. Maybe a function could be called from the page itself using a script and the
dom could be manipulated directly, but I'm not sure.

    It seems there are ways for the server to send a response to the client that
will then cause it to modify the DOM, but I'm not sure that's what I want. As the
page is loading I want the list to be populated with elements from the database.
Now it seems to me that I could just make a page by hand, that I don't need a
database whatsoever and everything could be hardcoded, and that would surely
simplify the project a great deal, but do I want to remove the whole database aspect
from it? Even if the database is unnecessary wouldn't it be worthwhile to play
around with sql? And of course there are tons of websites where records are stored
in a database and then loaded onto the page without any manual selection, videos,
blog posts and the like, so clearly it's doable and it might be a worthwhile
challenge to solve.

    It seems the solution of using jsdom has been the easiest to implement. It took
a fair bit of trawling on stack exchange, but I've found a way to edit my html files
from my node server. First the file is read and the data used to make a jsdom dom
object. Then elements can be edited however I want them to be edited, and finally
I write the new file back into the same location (maybe should use a different
location) which then gets served to the client. Right now all it does is erase
everything from the body, but it shouldn't take too much work for it to display
the records in a list

;********************************************************************************

07/07/20:
    I think the success of a project hinges on its consisting of small, achievable
goals. Yesterday I was able to add implementation for editing my html files through
the server because that's what I needed to do. It was a small goal and, while it
took a couple of hours of experimentation and reading to accomplish, the completion
of the goal was quite obvious. So I think the best thing to do before I start coding
today is to come up with a goal, however small, that I could achieve this morning.
If I can do this consistently enough then I imagine that eventually my project will
be quite functional.

    Today I'm gonna start by writing the projects to the html file. Then I might
consider refactoring some things because the way server.js is going it's gonna
look atrocious in no time at all. To write things to the site I'm going to need to
develop a better understanding of jquery because the routine that I have now is an
example from stack exchange (I think that's where I got it), so while I'm glad that
it successfully allows me to edit files, I don't yet know how to edit files how I
want to.

    My main issue it seems is that the records aren't being passed to write records
from get records. When I log them in write records the object is undefined.

    Ok, so looks like there's a whole bunch of stuff that I need to look into in
terms of async, promises, .then and that kind of stuff. I've gotten it writing
the records to the page but it writes them all multiple times (twice it seems). I
think I need to empty the list before adding any elements to it again, and I need
to make sure that one element doesn't get added twice (but I should also figure
out why it's trying to add two of the same element). The jsdom append function
keeps messing up the layout of my html so I need to look into that as well and, as
I said, I need to do some refactoring. Although the first thing I ought to do is
get a better understanding of js async stuff.

;*******************************************************************************
Async:
    JavaScript is event driven, meaning the flow of the program is determined by
events, such as user input, stuff happening on the server, and so on. Events
respond to signals. In event driven programs, a main loop listens for events and
when it hears an event it triggers a callback associated with that event. E.g.
on click do this, the program listens to see if the thing has been clicked and
when it is the callback function to handle the response is called.

    In JS, functions are objects, and so functions can take other functions as
arguments. E.g.

    function do_something(callback) {
        blah
        blah
        callback()
    }

    callback is a function and it gets called by do_something once do something
has done everything else it's set out to do. Functions can be defined within the
argument braces themselves:

    do_something(arg1, function(this, that) => {
        bing;
        bong;
    });

    A common callback style is the error-first callback, where we check to see if
there's an error first, and if not then we carry on. (I've used this a couple of
times in server.js).

    Callback hell or the pyramid of doom is a coding style where callback functions
are deeply nested leading to very messy and confusing coding. One way to solve this
is to make every function a standalone one, but that can lead to very jumpy code
that moves around between different functions a lot.

    Producing code does something that takes an amount of time. Consuming code
needs to use the results of the producing code for them to run. A promise links
producing and consuming code. A promise makes the result of the producing code
available once the producing code has finished running so anyone can use that
result

    A promise is pending when it hasn't finished running and settled once it is.
A promise will either resolve or reject, i.e. succeed or fail in doing what it
needs to. You can call then on promise objects to specify what to do once the
promise has settled. catch is shorthand for then that only cares about a rejected
promise. Finally runs on a promise once it has settled, regardless of resolution
or rejection.

    In a promise chain, you can throw then functions on top of each other so the
result of the promise is passed through the chain of then handlers. Then returns
a promise, and a promise can have then called on it.

;*******************************************************************************
08/07/20
    Today I want to focus on the structure of the program, how things are laid
out and whatnot. Where should functions go, how should functions be grouped, that
sort of thing. I want the main server loop in server.js, that's for sure, but that
loop is going to see a lot of expansion in very little time as requests change and
responses need to be more specific. E.g. the database stuff shouldn't be done
every time there's a request. If this whole program revolves around the server loop
then how are things going to be divided up? One thing that I need to think about is
what needs to be done before the server gets spun up, do we need to connect to the
database before that? Possibly. Does it need to be guaranteed to have happened
before we start using the server?

    One thing that should be worthwhile is to change the server logic so it performs
actions based on the extension to the url (I think this is called routing or at
least has something to do with it but I need to look into it). That way, the
database stuff only gets called when the page that requires the project entries is
requested.

    Should the logic of each separate page be stored in a different file? I don't
know, but I should try it to see how it goes.

    I've moved all the project page logic to project.js. I've had to include some
require statements there that are already in server.js because they need to perform
some function there as well, oh well. It feels a bit messy, but server.js is a lot
nicer now. Right now I'm connecting to the database in server.js which I'm not sure
is the right thing to do as so far we only need to database on the projects page,
can we expect that that's how things will stay? Do we need to have a persistent
connection to the database? If not, would we be making a new connection every time
we accessed the projects page? I think the best thing to do is keep the database
connection as it is. I don't think there's much lost with having a possibly
unnecessary database connection when I'm not sure what the alternative would be.

    I'm not a fan of SQL

    I've added github links to the projects and I'm not sure where to go from here.
There's plenty of directions available. index.html should be the homepage, projects
should have its own page. There should be a way to get from the homepage to
projects. I need to do more work on routing, specifically adding a 404 and maybe
other things.

    It seems people usually pair node with express and express handles routing,
it seems possible to do routing without it but it might be easier with it. The
question is, do I want another module? I guess there wouldn't be much cost to it,
it just feels odd that I'm having to use so many modules (to date: jsdom, jquery,
mysql, fs, http, (actually those last two are pretty necessary, and so is mysql,
and the first two are needed for updating our html, so it doesn't seem like too big
a deal)).

;********************************************************************************
09/07/20
    A big part of the challenge of programming is actually understanding the
requirements of the problem, it's an easy thing to say "oh, I want to write a
website", and it's easy to set up a basic server that renders html, but the more
you work on it the more you realise that you have to do. There are thousands of tiny
little steps between serving a plain html file to localhost and hosting a modern
website. And that's what makes the first time around so hard, because you have to
figure out what those requirements are, once you've made one website from the
ground up, it suddenly becomes much easier to make any website, because you
understand the scope of the problem. I'm at that stage where I'm only slowly figuring
out what the actual scope is.

    Today I'm gonna switch my routing over to express and see what I'll do from
there.
;********************************************************************************
Handling http requests:
    Routes forward http requests to the appropriate controller functions.
    Controller functions get any requested data from models (which are connected
to the database), create an HTML page displaying that data and return it to the
user.
    Views are templates used by the controllers to render data
;********************************************************************************
Routing:
    Routes take an HTTP verb (get, post, put, delete, basically CRUD), a URL path
and a function to handle that path.
    We can use an express app that listens on a port to check what type of request
is being sent and handle it accordingly. E.g. app.get('/', function...) tells the
server what to do when the url has no extension and the request is a get type
;********************************************************************************
    The more I work on this the less verbose it gets because I discover more and
more that all my problems have already been solved by some module or framework. It's
great, but it also looks like I've done less work than I have. I guess that's the
advantage of github and a diary, even though right now it looks very minimal, a
lot had to be done, learned, and redone to get here.

    I'm at a point where I'm not sure which direction to go in next. I could dive
into CSS, rendering engines, and stuff like that to gussy up my admittedly plain
website, or I could work on adding pages for each individual project, or maybe
look more into http stuff and middleware, cookies, authentication and whatnot, or
whatever have you. It seems that the actual functionality of my portfolio site isn't
that complex (and it shouldn't be either), so now I'm sort of in an open ended
place where I could go in any of many directions. All I really have to do is pick
one.

    It's possible that I could replace the jquery jsdom business with some kind
of template files that get filled in with data from the database. A quick search
shows that pug implements iteration so we can add a list that's however big we
want it to be (for our projects). As far as I can tell, that means we don't have
to use jquery and jsdom anymore (or at least for anything we've implemented so
far).

    Turns out templating could in fact solve all those problems I was having
earlier with changing the dom after getting data from the server. All my work
recently seems to have reduced the amount of code my project consists of. Of
course that makes sense, it would have to, it's just in some ways frustrating that
I went down several roads that were first frustrating in and of themselves, only
to later find that they didn't have to be done at all. But I guess it is what it
is. At least in trying to solve those problems myself, I actually found out what
the problems I would face would be and hence what the modules I now use would also
solve. If I ever need to make a website from scratch again, I can get up and
running a lot faster.
;********************************************************************************
10/07/20
    I've finally bitten the design bullet and started looking into css. It all
seems pretty intuitive and easy, the problem is that I don't have an exact idea of
what I want the page to look like. My current idea is to do something like tumblr,
it's a one page portfolio where all the entries are little boxes that contain a
picture and a title or something, and clicking on that box will bring up a pop up
that has a full description as well as a link to github and so on. Of course I don't
yet know how to do all that, but it doesn't look to be hard to learn. I don't know
if I'll need an extra engine for css or if I'll end up using a framework like node
or react, for now it doesn't look like I need them but I'll see what problems crop
up.

    For the page I want to make little boxes all of the same size that include a
snippet of the content of each project. The projects page is no longer required, in
this design everything is on one page and comes up as a pop up.

    An interesting exercise with web development would be to see if you could
replicate already existing websites.
;********************************************************************************
14/07/20
    After a few days of hiking and playing around with CSS, I've come back to the
main project. I feel a lot more confident this time around in regards to CSS
because I have a better understanding of how it thinks and behaves. Because I've
learned to implement different components myself, adding them to my own page has
been a breeze. There's still some elements that are misaligned and some design
that I'm not sure about, but I'm happy with the new progress I've been making.
The website is very bare bones, but I can't think of much else to include. I want
to have pop ups jump up when you click on a project that gives a full description
of what's going on, but other than that there's not many features to include
(maybe also a way to sort projects and display only ones with certain tags).

    To be completely honest, the site looks bad, it looks cheap, but I don't know
how I could improve it. I'd have to just browse around a bit and see what other
websites do that looks better, because I want the page to look good, but I don't
feel like I have a design vision.

    I just removed the scaling on the cards on hover because I feel it was a bit
too much. The search bar on google just increases the box shadow on hover so I
decided to do that as well.
;********************************************************************************
15/07/20
    I've had to add jquery to my templates to properly open and close the info
pop up when it's needed. At least I no longer need to write document.getElementById
or anything like that anymore. I think the next step is to make custom info screens
for the different projects and make it so the clicking on a project will open the
right info page. I might also need to add an admin page where I can use forms to
add entries to my database, mostly because working with forms seems to be a useful
activity and also because I don't want to deal with MySQL directly. If I can
abstract it out a bit then I can just put some details in the page and the server
will format the right SQL for me.
;********************************************************************************
16/07/20
    Making an admin page to make the editing the database easier. Need to add
checks before sending the request to detect invalid input (otherwise you get an
unexplained internal server error). Need to also be able to edit projects from
the admin page, so I can change values for entries and delete them if necessary.
It actually feels pretty cool being able to edit the database from inside my
browser, I think I quite enjoy doing this kind of stuff. Instead of having to
write tedious SQL, I can just fill out some forms on a page and the syntax is
handled behind the scenes.

    Other than the admin page, what needs to happen now is for the project pop ups to
have the right information instead of just Lorem Ipsum. That shouldn't be too
hard to do, but I'll get to it once I've ironed out the admin-y stuff. (Which
I think will include promises because there are con functions that I need to use
in different places and I don't just want to nest them repeatedly (speaking of,
I think I finally understand why promises are useful and what they prevent from
happening)).
;********************************************************************************
17/07/20
    Posting new projects is easy enough, but deleting them is a bit of a hassle.
Html doesn't yet support put and delete so there's no direct way of telling the
server to delete a project without using an ajax call, but for some reason ajax
didn't want to play ball (it did delete the projects, but it didn't reload the
admin page with the proper alert that I wanted, I had to reload manually). I'm
looking into overriding headers to let a form be used for deleting which would
hopefully make things a lot easier. 
